# Convert the "Initial validation due date" column to a date format
df$Initial_validation_due_date <- as.Date(df$Initial_validation_due_date, format="%m/%d/%Y")

# Define a function to calculate the next validation due date
calculate_next_validation_date <- function(initial_date, frequency, completed_dates) {
  # Determine the number of completed validations
  num_completed <- sum(!is.na(completed_dates))
  
  # Determine the number of months between the initial validation date and now
  diff_months <- as.numeric(difftime(Sys.Date(), initial_date, units="weeks"))/4
  
  # Determine the frequency in months
  if (frequency == "Bi-Monthly") {
    freq_months <- 2
  } else if (frequency == "Monthly") {
    freq_months <- 1
  } else if (frequency == "Six-monthly") {
    freq_months <- 6
  } else if (frequency == "Quarterly") {
    freq_months <- 3
  } else if (frequency == "Annually") {
    freq_months <- 12
  } else {
    stop("Invalid frequency")
  }
  
  # Determine the number of months until the next validation is due
  months_until_due <- freq_months * (num_completed + 1) - diff_months
  
  # Return the next validation due date
  return(initial_date + months_until_due*30)
}

# Apply the function to each row of the data frame
df$Next_validation_due_date <- apply(df, 1, function(x) {
  calculate_next_validation_date(x["Initial_validation_due_date"], x["Frequency"], x[6:17])
})
