---
title: "Untitled"
author: "Nazzeef Nazri admcw05"
date: "01/02/2023"
output: html_document
params:
    business_unit: "Retail"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}

# Load relevant packages/libraries
library(tidyverse)
library(scales)
library(readxl)
library(writexl)
library(officer)
library(janitor)
library(rvg)
library(flextable)
library(fs)

```


```{r}

# Read the relevant datasets

risk_df <- read_excel("Ex2Ex - Risk Report.xlsx", guess_max = 1000000)
controls_df <- read_excel("Ex2Ex - Risks and Controls Report.xlsx", guess_max = 1000000)
task_df <- read_excel("Ex2Ex - Task Report (Risks).xlsx", guess_max = 1000000)
kri_df <- read_excel("Ex2Ex - KRI Report.xlsx", guess_max = 1000000)
kri_links_df <- read_excel("Ex2Ex - KRI Report (with Links).xlsx", guess_max = 1000000)

```


```{r}
# Select only the relevant columns

risk_df <- risk_df %>%
    select(`Assessment Active`, `Assessed Risk Reference`, `Domain Name`, `Original BUH Sign Off Date`, `ORC Decision Date`, 
        `Residual Risk Likelihood`, `Residual Risk Rating`, `Residual Consequence Business Disruption`, 
           `Residual Consequence Customer Partner`, `Residual Consequence People`,
           `Residual Consequence Regulatory Legal`, `Residual Consequence Reputation`, `Risk Decision`) %>%
    
    # Convert date columns to the correct format
    mutate(`Original BUH Sign Off Date` = janitor::excel_numeric_to_date(`Original BUH Sign Off Date`),
           `ORC Decision Date` = excel_numeric_to_date(`ORC Decision Date`))

controls_df <- controls_df %>%
    select(`Assessed Risk Reference`, `Control Type`, `Control Effectiveness`)

task_df <- task_df %>%
    select(`Assessed Risk Reference`, Status)


```


```{r}

highest_risk_consequence_df <- risk_df %>%
    pivot_longer(cols = `Residual Consequence Business Disruption`:`Residual Consequence Reputation`, names_to = "Residual Consequence", values_to = "Highest Residual Consequence") %>%
    filter(`Highest Residual Consequence` > 0) %>%
    group_by(`Assessed Risk Reference`) %>%
    filter(`Highest Residual Consequence` == max(`Highest Residual Consequence`)) %>%
    ungroup() %>%
    distinct(`Assessed Risk Reference`, `Highest Residual Consequence`)
    

risk_df <- risk_df %>%
    left_join(highest_risk_consequence_df, by = "Assessed Risk Reference") 

# To identify if one or more treatment plan is overdue (where Status == Overdue) and add into the risk dataset 
risk_tp_overdue_df <- risk_df %>%
    left_join(task_df, by = "Assessed Risk Reference") %>%
    distinct(`Assessed Risk Reference`, `Domain Name`, Status) %>%
    group_by(`Assessed Risk Reference`) %>%
    mutate(`tp_diff` = ifelse(`Status` == lag(`Status`), "Same", ">1 Overdue")) %>%
    mutate(`tp_diff` = ifelse(`tp_diff` %in% c(NA), lead(`tp_diff`), `tp_diff`)) %>%
    filter(`Status` == "Overdue") %>%
    ungroup() %>%
    filter(!tp_diff %in% c(NA)) %>%
    select(`Assessed Risk Reference`, tp_diff) 
    

risk_df <- risk_df %>%
    left_join(risk_tp_overdue_df, by = "Assessed Risk Reference") %>%
    select(-`Residual Consequence Business Disruption`, -`Residual Consequence Customer Partner`, -`Residual Consequence People`,
           -`Residual Consequence Regulatory Legal`, -`Residual Consequence Reputation`)


# To identify if one or more of the Control Effectiveness is ineffective and add into the risk dataset: 
controls_ineffective_df <- risk_df %>%
    left_join(controls_df, by = "Assessed Risk Reference") %>%
    select(-`Control Type`) %>%
    distinct(`Assessed Risk Reference`, `Control Effectiveness`) %>%
    group_by(`Assessed Risk Reference`) %>%
    mutate(`effectiveness_diff` = ifelse(`Control Effectiveness` == lag(`Control Effectiveness`), "Same", ">1 Ineffective")) %>%
    mutate(`effectiveness_diff` = ifelse(`effectiveness_diff` %in% c(NA), lead(`effectiveness_diff`), `effectiveness_diff`)) %>%
    filter(`Control Effectiveness` == "Ineffective") %>%
    ungroup() %>%
    filter(!effectiveness_diff %in% c(NA)) %>%
    select(`Assessed Risk Reference`, effectiveness_diff)
    
risk_df <- risk_df %>%
    left_join(controls_ineffective_df, by = "Assessed Risk Reference") 


```


```{r}

# Identifying risks where 1 or more linked KRIs is amber or red based on the latest reporting period

kri_df <- kri_df %>%
    select(`Assessment Active`, `Domain Name`, `KRI Name`, `Assessed Risk Reference`, `Result Name`, `Period Status`) %>%
    filter(`Assessment Active` == "Yes")
    

kri_links_df <- kri_links_df %>%
    select(`Assessment Active`, `Domain Name`, `Assessed Risk Reference`, `Domain Name (Linked Item)`, `Assessment Name (Linked Item)`, `Name (Linked Item)`,
           `Reference (Linked Item)`) %>%
    filter(`Assessment Active` == "Yes") %>%
    select(-`Assessment Active`, -`Domain Name`)


kri_amber <- kri_df %>%
    left_join(kri_links_df, by = "Assessed Risk Reference") %>%
    filter(!`Reference (Linked Item)` %in% c(NA)) %>% 
    filter(str_detect(`Reference (Linked Item)`, "R-")) %>%
    filter(!str_detect(`Assessment Name (Linked Item)`, "Inactive Risks")) %>% 
    mutate(reporting_period = str_extract(`Result Name`, "[:digit:]{4}/[:digit:]{2}")) %>%
    mutate(reporting_period = paste0(reporting_period, "/01")) %>%
    mutate(reporting_period = as.Date(reporting_period)) %>%
    group_by(`Assessed Risk Reference`) %>%
    arrange(desc(reporting_period), .by_group = TRUE) %>%
    filter(`Period Status` %in% c("Green", "Amber", "Red")) %>%      # To get the latest period based on RAG status that are available
    top_n(n = 1) %>%
    ungroup() %>%
    mutate(`amber_more` = ifelse(`Period Status` %in% c("Amber", "Red"), "Yes", "No")) %>%
    filter(`Period Status` %in% c("Amber", "Red")) %>%
    distinct(`Reference (Linked Item)`, amber_more) 


risk_df <- risk_df %>%
    left_join(kri_amber, by = c("Assessed Risk Reference" = "Reference (Linked Item)")) 

# %>%
#     pivot_wider(names_from = `Result Name`, values_from = `Period Status`) %>%
#     select(1:8)



```


```{r}

kri_trend <- kri_df %>%
    left_join(kri_links_df, by = "Assessed Risk Reference") %>%
    filter(!`Reference (Linked Item)` %in% c(NA)) %>% 
    filter(str_detect(`Reference (Linked Item)`, "R-")) %>%
    filter(!str_detect(`Assessment Name (Linked Item)`, "Inactive Risks")) %>%
    mutate(reporting_period = str_extract(`Result Name`, "[:digit:]{4}/[:digit:]{2}")) %>%
    mutate(reporting_period = paste0(reporting_period, "/01")) %>%
    mutate(reporting_period = as.Date(reporting_period)) %>%
    group_by(`Assessed Risk Reference`) %>%
    arrange(desc(reporting_period), .by_group = TRUE) %>%
    filter(`Period Status` %in% c("Green", "Amber", "Red")) %>%      # To get the latest period based on RAG status that are available
    top_n(n = 3) %>%
    mutate(`Period Status` = factor(`Period Status`, levels = c("Green", "Amber", "Red"))) %>%
    mutate(period_no = case_when(
        `Period Status` == "Green" ~ 1,
        `Period Status` == "Amber" ~ 2,
        TRUE ~ 3
    )) %>%
    mutate(kri_trend = case_when(
        `period_no` > lead(`period_no`) ~ "Trend up",
        `period_no` < lead(`period_no`) ~ "Trend down",
        TRUE ~ "Stagnant"
    )) %>%
    slice(1) %>%
    ungroup() %>%
    filter(kri_trend == "Trend up") %>%
    distinct(`Reference (Linked Item)`, kri_trend)


risk_df <- risk_df %>%
    left_join(kri_trend, by = c("Assessed Risk Reference" = "Reference (Linked Item)")) 
    

risk_df <- risk_df %>%
    mutate(control_tp_red = case_when(
        tp_diff == ">1 Overdue" | effectiveness_diff == ">1 Ineffective" ~ "Red", 
        TRUE ~ "Green"
    )) %>%
    mutate(kri_amber = case_when(
        amber_more == "Yes" | kri_trend == "Trend up" ~ "Amber",
        TRUE ~ "Green"
    )) %>%
    select(-tp_diff, -effectiveness_diff, -amber_more, -kri_trend) %>%
    filter(`Assessment Active` == "Yes")


```


```{r}

risk_df <- risk_df %>%
    mutate(profile_status = case_when(
        control_tp_red == "Red" & kri_amber == "Green" ~ "Red",
        control_tp_red == "Green" & kri_amber == "Amber" ~ "Amber",
        control_tp_red == "Green" & kri_amber == "Green" ~ "Green",
        TRUE ~ "Red"
    )) %>%
    select(-control_tp_red, -kri_amber) %>%
    mutate(`Risk Decision` = case_when(
        `Risk Decision` == "Treat" ~ "T",
        `Risk Decision` == "Accept" ~ "A",
        TRUE ~ `Risk Decision`
    )) %>%
    mutate(`Risk Decision` = na_if(`Risk Decision`, "-"))


```


```{r}

retail_risk_df <- risk_df %>%
    filter(`Domain Name` == params$business_unit)


# retail_risk_df %>%
#     mutate(`Residual Risk Likelihood` = factor(`Residual Risk Likelihood`, levels = c("Rare", "Unlikely", "Possible", "Likely", "Almost Certain")))

retail_risk_df <- retail_risk_df %>%
    select(`Risk Decision`, `Highest Residual Consequence`, `Residual Risk Likelihood`, profile_status) %>%
    mutate(residual_likelihood = case_when(
        `Residual Risk Likelihood` == "Rare" ~ 1,
        `Residual Risk Likelihood` == "Unlikely" ~ 2,
        `Residual Risk Likelihood` == "Possible" ~ 3,
        `Residual Risk Likelihood` == "Likely" ~ 4,
        `Residual Risk Likelihood` == "Almost Certain" ~ 5,
        TRUE ~ 0
    )) %>%
    # mutate(profile_status = case_when(
    #     `profile_status` == "Green" ~ 1,
    #     `profile_status` == "Amber" ~ 2,
    #     TRUE ~ 3
    # )) %>%
    select(risk_decision = `Risk Decision`, residual_rating = `Highest Residual Consequence`, residual_likelihood, profile_status)

retail_risk_df

```


Building the risk matrix

```{r}

# Defining the boundaries and calculate the midpoints for each of the sections

min_1 <- 0
min_2 <- 100
min_3 <- 200
min_4 <- 300
min_5 <- 400
max_plot = 500

mid_1 <- ((min_2 - min_1) / 2) + min_1
mid_2 <- ((min_3 - min_2) / 2) + min_2
mid_3 <- ((min_4 - min_3) / 2) + min_3
mid_4 <- ((min_5 - min_4) / 2) + min_4
mid_5 <- ((max_plot - min_5) / 2) + min_5

mid_values <- data.frame("val"= c(1, 2, 3, 4, 5), "midpoint"=c(mid_1, mid_2, mid_3, mid_4, mid_5))

mid_values

```



```{r}

retail_risk_df <- retail_risk_df %>%
    left_join(mid_values, by = c("residual_rating" = "val")) %>%
    rename(rating_pos = midpoint) %>%
    left_join(mid_values, by = c("residual_likelihood" = "val")) %>%
    rename(likelihood_pos = midpoint)

```


We define offsets to accommodate up to 7 risks within the same section.


```{r}

retail_risk_df <- retail_risk_df %>%
    mutate(section_no = residual_rating + (residual_likelihood - 1) * 5) %>%
    arrange(section_no)

retail_risk_df$section_no_count <- ave(retail_risk_df$section_no==retail_risk_df$section_no, retail_risk_df$section_no, FUN=cumsum)

position_offset <- 30

# Initialise offsets to be 0
retail_risk_df$residual_rating_pos_offset <- 0
retail_risk_df$residual_likelihood_pos_offset <- 0

# If there are 2 risks in the same section,
# and x < y, move y up
retail_risk_df$residual_likelihood_pos_offset[
    (retail_risk_df$section_no_count == 2) &
    (retail_risk_df$residual_rating <= retail_risk_df$residual_likelihood)
] <- position_offset

# If there are 2 risks in the same section,
# and x > y, move x up
retail_risk_df$residual_rating_pos_offset[
    (retail_risk_df$section_no_count == 2) &
    (retail_risk_df$residual_rating > retail_risk_df$residual_likelihood)
] <- position_offset

# If there are 3 risks in the same section,
# and x < y, move y down for our 3rd risk
retail_risk_df$residual_likelihood_pos_offset[
    (retail_risk_df$section_no_count == 3) &
    (retail_risk_df$residual_rating <= retail_risk_df$residual_likelihood)
] <- -position_offset

# If there are 3 risks in the same section,
# and x > y, move y down for our 3rd risk
retail_risk_df$residual_rating_pos_offset[
    (retail_risk_df$section_no_count == 3) &
    (retail_risk_df$residual_rating > retail_risk_df$residual_likelihood)
] <- -position_offset

# Move our risk in perpendicular axis for 4th and 5th risks
retail_risk_df$residual_likelihood_pos_offset[
    (retail_risk_df$section_no_count == 4) &
    (retail_risk_df$residual_rating > retail_risk_df$residual_likelihood)
] <- position_offset
retail_risk_df$residual_rating_pos_offset[
    (retail_risk_df$section_no_count == 4) &
    (retail_risk_df$residual_rating <= retail_risk_df$residual_likelihood)
] <- position_offset
retail_risk_df$residual_likelihood_pos_offset[
    (retail_risk_df$section_no_count == 5) &
    (retail_risk_df$residual_rating > retail_risk_df$residual_likelihood)
] <- -position_offset
retail_risk_df$residual_rating_pos_offset[
    (retail_risk_df$section_no_count == 5) &
    (retail_risk_df$residual_rating <= retail_risk_df$residual_likelihood)
] <- -position_offset

# Offset both x and y simultaneously for 6th and 7 risks
retail_risk_df$residual_likelihood_pos_offset[retail_risk_df$section_no_count == 6] <- position_offset
retail_risk_df$residual_rating_pos_offset[retail_risk_df$section_no_count == 6] <- position_offset
retail_risk_df$residual_likelihood_pos_offset[retail_risk_df$section_no_count == 7] <- -position_offset
retail_risk_df$residual_rating_pos_offset[retail_risk_df$section_no_count == 7] <- -position_offset

```



```{r}

# Convert residual rating and residual likelihood into an ordered categorical: 

retail_risk_df$residual_rating <- factor(retail_risk_df$residual_rating, ordered=TRUE)

retail_risk_df <- retail_risk_df %>%
    mutate(residual_likelihood = ifelse(residual_likelihood == 0, NA, residual_likelihood))

retail_risk_df$residual_likelihood <- factor(retail_risk_df$residual_likelihood, ordered=TRUE)


# X-axis
factor_values_x <- c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5")

levels(retail_risk_df$residual_rating) <- c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5")

# Y-axis
factor_values_y <- c("Rare", "Unlikely", "Possible", "Likely", "Almost Certain")

levels(retail_risk_df$residual_likelihood) <- c("Rare", "Unlikely", "Possible", "Likely", "Almost Certain")

retail_risk_df$text_color <- "black"

retail_risk_df$text_color[retail_risk_df$profile_status=="Amber" | retail_risk_df$profile_status=="Red"] <- "black"


retail_risk_df 



```


```{r}
 
# Define some colours
light_green <- '#A4C93F'
yellow <- '#FFFD54'
red <- '#EA3224'
white <- "#FFFFFF"

# Initialise plot
# Our x and y values are the x and y positions
# offset by our offsets to prevent points colliding
p <- ggplot(retail_risk_df,
            aes(x = rating_pos + residual_rating_pos_offset,
                y = likelihood_pos + residual_likelihood_pos_offset,
                fill = profile_status
               )
           )
# Remove default values
p <- p+theme_classic()

# Label x and y axes
p <- p + xlab('')
p <- p + ylab('')

# Scale x axis between 0 and 420
# Define breaks for our axis ticks
# Label ticks with proper values
# Don't expand axis past min and max points
p <- p + scale_x_continuous(
    limits=c(min_1, max_plot),
    breaks = c(mid_1, mid_2, mid_3, mid_4, mid_5),
    labels = factor_values_x,
    expand=c(0, 0)
)

# Copy for y axis
p <- p + scale_y_continuous(
    limits=c(min_1, max_plot),
    breaks = c(mid_1, mid_2, mid_3, mid_4, mid_5),
    labels = factor_values_y,
    expand=c(0, 0)
)


### Backgrounds for each section are rectangles
#Row 1 Rects
p <- p + geom_rect(xmin=min_1, xmax=min_2, ymin=min_1, ymax=min_2, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_2, xmax=min_3, ymin=min_1, ymax=min_2, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_3, xmax=min_4, ymin=min_1, ymax=min_2, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_4, xmax=min_5, ymin=min_1, ymax=min_2, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_5, xmax=max_plot, ymin=min_1, ymax=min_2, fill=yellow, size=0.5, color='black')

#Row 2 Rects
p <- p + geom_rect(xmin=min_1, xmax=min_2, ymin=min_2, ymax=min_3, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_2, xmax=min_3, ymin=min_2, ymax=min_3, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_3, xmax=min_4, ymin=min_2, ymax=min_3, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_4, xmax=min_5, ymin=min_2, ymax=min_3, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_5, xmax=max_plot, ymin=min_2, ymax=min_3, fill=yellow, size=0.5, color='black')

#Row 3 Rects
p <- p + geom_rect(xmin=min_1, xmax=min_2, ymin=min_3, ymax=min_4, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_2, xmax=min_3, ymin=min_3, ymax=min_4, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_3, xmax=min_4, ymin=min_3, ymax=min_4, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_4, xmax=min_5, ymin=min_3, ymax=min_4, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_5, xmax=max_plot, ymin=min_3, ymax=min_4, fill=red, size=0.5, color='black')

#Row 4 Rects
p <- p + geom_rect(xmin=min_1, xmax=min_2, ymin=min_4, ymax=min_5, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_2, xmax=min_3, ymin=min_4, ymax=min_5, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_3, xmax=min_4, ymin=min_4, ymax=min_5, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_4, xmax=min_5, ymin=min_4, ymax=min_5, fill=red, size=0.5, color='black')
p <- p + geom_rect(xmin=min_5, xmax=max_plot, ymin=min_4, ymax=min_5, fill=red, size=0.5, color='black')

#Row 5 Rects
p <- p + geom_rect(xmin=min_1, xmax=min_2, ymin=min_5, ymax=max_plot, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_2, xmax=min_3, ymin=min_5, ymax=max_plot, fill=light_green, size=0.5, color='black')
p <- p + geom_rect(xmin=min_3, xmax=min_4, ymin=min_5, ymax=max_plot, fill=yellow, size=0.5, color='black')
p <- p + geom_rect(xmin=min_4, xmax=min_5, ymin=min_5, ymax=max_plot, fill=red, size=0.5, color='black')
p <- p + geom_rect(xmin=min_5, xmax=max_plot, ymin=min_5, ymax=max_plot, fill=red, size=0.5, color='black')

# Plot scatter chart
# Shape is a bordered circle
# Size needs to be large enough to allow for id to be legible
p <- p + geom_point(aes(colour = profile_status), shape=21, size=10)


# Fill points with colours based on profile_status values
fill_colors <- c("Green" = white, "Amber" = yellow, "Red" = red)

p <- p + scale_fill_manual(values = fill_colors, name="Risk")

# Remove the legend 
p <- p +theme(
    legend.position = "none"
)

# Fill the points with the ID labels
p <- p + geom_text(aes(label= risk_decision), size=3, hjust=0.5, vjust=0.5, color = retail_risk_df$text_color)

p

```



```{r}
retail_risk_df  

risk_df %>%
    filter(`Domain Name` == "Retail") %>%
    filter(`Residual Risk Likelihood` == "Almost Certain" & `Highest Residual Consequence` == 2)
```


```{r}
# Convert Risk Visual into editable PowerPoint image

p_dml <- rvg::dml(ggobj = p)

```


Generate PowerPoint Slides

```{r}

ppoint <- read_pptx("BUHReportTemplate.pptx")

ppoint %>%
    layout_properties()

```


```{r}

ppoint <- add_slide(ppoint, layout = "risk_matrix", master = "1_Office Theme")
ppoint <- ph_with(ppoint, value = p_dml, location = ph_location_label(ph_label = "risk_matrix_visual"))
print(ppoint, target = "BUH_test.pptx")

```


